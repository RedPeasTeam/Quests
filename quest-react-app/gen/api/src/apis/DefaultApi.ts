/* tslint:disable */
/* eslint-disable */
/**
 * Quests API service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Genre,
    GenreFromJSON,
    GenreToJSON,
    Quests,
    QuestsFromJSON,
    QuestsToJSON,
    Reviews,
    ReviewsFromJSON,
    ReviewsToJSON,
} from '../models';

export interface GenreRequest {
    name?: string;
}

export interface MainRequest {
    parametres?: string;
}

export interface MapRequest {
    parametres?: string;
}

export interface ReviewsRequest {
    parametres?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns \'Hello\' to the caller
     */
    async genreRaw(requestParameters: GenreRequest): Promise<runtime.ApiResponse<Array<Genre>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genre`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GenreFromJSON));
    }

    /**
     * Returns \'Hello\' to the caller
     */
    async genre(requestParameters: GenreRequest): Promise<Array<Genre>> {
        const response = await this.genreRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns parametres of Quests
     */
    async mainRaw(requestParameters: MainRequest): Promise<runtime.ApiResponse<Array<Quests>>> {
        const queryParameters: any = {};

        if (requestParameters.parametres !== undefined) {
            queryParameters['parametres'] = requestParameters.parametres;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/main`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestsFromJSON));
    }

    /**
     * Returns parametres of Quests
     */
    async main(requestParameters: MainRequest): Promise<Array<Quests>> {
        const response = await this.mainRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns some info about map
     */
    async mapRaw(requestParameters: MapRequest): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        if (requestParameters.parametres !== undefined) {
            queryParameters['parametres'] = requestParameters.parametres;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/map`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns some info about map
     */
    async map(requestParameters: MapRequest): Promise<Array<any>> {
        const response = await this.mapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns some info about review
     */
    async reviewsRaw(requestParameters: ReviewsRequest): Promise<runtime.ApiResponse<Array<Reviews>>> {
        const queryParameters: any = {};

        if (requestParameters.parametres !== undefined) {
            queryParameters['parametres'] = requestParameters.parametres;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewsFromJSON));
    }

    /**
     * Returns some info about review
     */
    async reviews(requestParameters: ReviewsRequest): Promise<Array<Reviews>> {
        const response = await this.reviewsRaw(requestParameters);
        return await response.value();
    }

}
